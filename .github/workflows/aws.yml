# =========================================================================
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS (if any),
# on every push to the master branch.
# =========================================================================

on:
  push:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    # ==============================
    # CHECKOUT
    # ==============================
    - name: Checkout
      uses: actions/checkout@v1

    # ==============================
    # AWS CREDENTIALS CONFIGURATION
    # ==============================
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # ==============================
    # LOGIN TO AWS ECR
    # ==============================
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ==============================
    # RUN TEST
    # ==============================
    - name: npm install and build
      run: |
        npm ci
        npm run build:ssr
      env:
        CI: true

    # ==============================
    # DEPLOY IMAGE TO AWS ECR
    # ==============================
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-ecs-deploy-repo
        GITHUB_IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: us-east-2
      run: |
        # Check if existing images
        # use the existing image tag as build tag
        EXISTING_IMAGE_TAG=$(aws ecr list-images --region us-east-2 --repository-name ecr-ecs-deploy-repo --filter "tagStatus=TAGGED" --query 'imageIds[*].imageTag' --output text)
        if [ -z "$EXISTING_IMAGE_TAG" ]
        then
          BUILD_IMAGE_TAG="$GITHUB_IMAGE_TAG"
        else
          BUILD_IMAGE_TAG="$EXISTING_IMAGE_TAG"
        fi
        IMAGES_TO_DELETE=$(aws ecr list-images --region $AWS_REGION --repository-name $ECR_REPOSITORY --filter "tagStatus=TAGGED" --query 'imageIds[*]' --output json)
        aws ecr batch-delete-image --region $AWS_REGION --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true
        # Build a docker container
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_IMAGE_TAG .
        # push docker build it to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_IMAGE_TAG"
