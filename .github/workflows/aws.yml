# =========================================================================
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS (if any),
# on every push to the master branch.
# =========================================================================

on:
  push:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    # ==============================
    # CHECKOUT
    # ==============================
    - name: Checkout
      uses: actions/checkout@v1

    # ==============================
    # AWS CREDENTIALS CONFIGURATION
    # ==============================
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # ==============================
    # LOGIN TO AWS ECR
    # ==============================
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ==============================
    # RUN TEST
    # ==============================
    - name: npm install, build, and test
      run: |
        npm ci
        npm run test:ci
        npm run e2e
        npm run build:ssr
      env:
        CI: true
        DEBUG: '*'

    # ==============================
    # DEPLOY IMAGE TO AWS ECR
    # ==============================
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr-ecs-deploy-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # ===========================
    # Custom Task Definition
    # ===========================
    # 1. Store your ECS task definition as a JSON file in your repository.
    # The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
    # 2. Replace the value of `task-definition` in the workflow below with your JSON file's name.
    # 3. Replace the value of `container-name` in the workflow below with the name of the container
    # in the `containerDefinitions` section of the task definition.
    # ===========================
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ecr-ecr-deploy-container
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ecr-deploy-service
        cluster: ecr-ecs-deploy
        wait-for-service-stability: true
